/* ================================================= 
Base Element Styles----------Base element Styles 
================================================== */

/* This is the section where you select the specific elements. For example here is where you would choose "a" or "body" or "ul" or "h2" etc. */
* {
  box-sizing: border-box;
  /* this is done so that whichever element you decide to manipulate thier padding or border the values will be included in width and height. */
}

body {
  line-height: 1.5;
  background: #CDE5D7;
}

a {
  text-decoration: none;
}

a:link {
  color: blue;
  /* I dont know how to show off the hex color i chose before the link is clicked?
  update: so it does show, I forget how i did it but the blue link was shown. s
  */
}

a:visited {
  color: #EF6461;
}

h2 {
  margin-top: 5%;
}

h1, h2, h3 {
  font-family: 'Antonio', sans-serif;
}

p {
  font-family: 'Varela Round', sans-serif;
  font-size: 1.2rem;
}

img {
  max-width: 100%;
  /* setting this constrains the image to the width of the viewport */
}

nav {
  /* here is where i will add the decorations to my nav bar. Also as you can see we can apply a font family at a specific element.
  Just make sure to add your own style. 
  */
  /* font-family: "Roboto", Arial, Verdana; */
  font-weight: 400;
  letter-spacing: .05em;
  /* background-color: #829356; */
  padding: 20px; 
  margin: 0 25px;
}

footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
  /* height: 100px; */
  border-top: 1px solid black;
  margin: 0 15px;

  /* To have this type of style for footer the display needs to be a flex so i can use the justify-content property to seperate the children. */

  /* width: 100%; */
}




/* ================================================
Base Layout Styles------------Base Layout Styles
================================================== */

/* -----------------Navigation-------------------- */


.profile {
  width: 350px;
}

/* -----------------Containers------------------- */
.container {
  max-width: 1100px;
  margin: 0 auto;
  /* This container now keeps everything inside so there's no bleed through or reshuffling of the flex items. 
  I can also add this in the <body> also. We remove the default broswer setting of the margin and center the structure. Also we add a "max-width" so that there's a limit of space our work can move around in. If not then the work we create may bleed through.
  */
}

.name, .main-nav {
  /* display:flex;
  flex-flow: column wrap;
  justify-content: center; */
  text-align: center;
}

.main-nav, .main-nav li {
  width: 100%; 
  /* I dont understand why the .main-nav li is also included to have a width of 100%? The .main-nav should be enough. */
  /* I need to test this out and see what happens. */
}

/* .name a, .main-nav a {
  color: #000;
  /* I dont know what this does yet? In the meantime I dont have any <a> available at the moment.  
} 
*/
.main-nav {
  margin-top: 30px;
  /* this will give a bit of space with .name thats above. */
}

.main-nav li {
  padding: 10px 0;
  margin: 5px auto;
  background-color: #fff;
  border-radius: 10px;
}

.main-nav a {
  /* text-transform: ; 
  apply once you add some <a>. I want to get the structure down before I do this. 
  */ 
}

.banner {
  text-align: center;
  padding: 0 20px;
  /* margin: 0 auto; */
  /* max-width: 850px; */
}

.nameP {
  background: white;
  padding: 5%;
  margin-bottom: 0;
  text-align: center;
  /* I gave the Portfolio title its own class and I styled the container the same as ".portfolio" container. I then erased the margin bottom from ".nameP" and top-margin from ".portfolio" so the two can come together and look as one. */
  /* I erased the padding values from ".portfolio" which brings the top portion of the div closer to ".nameP". Now its looks just like the markup image. */

}

.portfolio {
  background: white;
  margin-top: 0;
  padding: 0 5% 10% 5%;
  /* 
  Theres something about adding the padding values that keeps hold of my 3 rows in the main section. Once i stretch the screen to a width of 1100px then the 3 row breaks and the bottom two expand to fill up the space. With the padding values applied I'm able to maintain the 3 rows up till a width of 1223px. 
  I assume when you add the padding it creates more room or something? Im still not too sure about all this.
  */
  
}

.portfolio {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  text-align: center;
}

.contact {
  max-width: 560px;
  text-align: center;
  padding: 0 20px;
  margin: 0 auto;
  /* border-bottom: 1px solid black; */
}

.main-footer {
 /* width: 100%; */
/* why when i write this the screen becomes scrollable horizontally? */
}

/* .main-footer {
  display: inline-flex;
  justify-content: space-between;
}  */


.reveal {
  display: none;
}



/* Media Queries------------------------Media Queries */
@media (min-width: 768px) {
  /* once you set a this @media then the designs from 0-767px are applied. This will apply from 768px and on. */
.main-nav {
  margin-top: 0;
  /* This is to remove the space from before to bring .main-nav and .name closer together. */
}

.main-nav li {
  display: inline-block;
  /* This is to display the lists side by side in a row instead of a column. At the same time it gives it a block lvl format. */
  width: auto;
  /* We set the value to auto which is the default value of "width". It also overrides the value we set before of "width: 100%" */
  margin-right: 15px;
  /* This here is just to give a bit more space in between each <li> */
  background-color: transparent;
  /* This will negate the color of what what we had before. */
}

.main-nav li:last-child {
  margin-right: 0;
  /* Creating space in between each lists works but its off to the right a bit. We selected the last <li> to remove its margin value which centers our <li>. */
}

/* .main-nav a, footer a {
  color: #fff;
} */

/* a:visited {
  color: #EF6461;
} */

.banner {
  display: flex;
  
}

.banner p {
order: -1;
text-align: start;
margin: 0 20px 0 0;
}

.banner img {
  width: 275px;
}

.portfolio {
    flex-flow: row wrap;
    /* i dont need to sent a "display" value because .portfolio is sill accepting the function from the base container style of "flex" */
    /* flex-flow allows me to input a "flex-direction" and the "flex-wrap" value on one line instead of two seperate properties. */
    justify-content: center;
    
  } 

.portfolio p {
  text-align: center;
} 

.col {
    padding: 5px;
    flex: 1 275px;
    /* 
    if i dont sent a flex-basis value then the items are scrunched up together. I dont understand why i cant leave the "flex-basis" value at "0". I dont even know if the flex-basis value is even working here? 
    */
  }

.btt {
  display: none;
}

.reveal {
  display: inline-block;
  padding-left: 15px;
}

  

}

@media (min-width: 1024px) {
nav {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.main-nav, .main-nav li {
  width: initial;
  margin-bottom: 0;
  /* without this the wording didn't space out. I thought i wouldn't need to write this here because I wrote this in the "@media of 768px". I dont understand why this didn't apply?
  I guess because it was only specified for the <li>, this is attacking the <ul> 
  */
  /* When using CSS flexbox and Grids its better to use the value "initial" instead of "auto" because auto can cause strange behaviors.
  width: auto    Default value. The browser calculates the width.
  width: initial Sets this property to its default value.
  */
}


  /* .portfolio {
    flex-flow: row wrap;
    justify-content: center;
  } */
   /* 
   I dont think i need to add these properties because once the px width is 825 the .portfolio container distributes the items into 3 rows. Im not to sure why this is?
   I came to the conclusion that i dont need this. The same property is in the "@media (min-width: 768px)" so it still applies. Also the padding from the .portfolio is whats holding the items in place for much longer. Increasing the padding must hold the items in longer. If there isnt any padding then this must be why the items move to the next line or loose structure quickly because theres room to be filled in. 
   */

   .banner {
     margin: 0 25px;
   }
  
   .banner p {
    padding: 0 25px 0 0px;
  }

  .banner img {
    width: 300px;
  }
}